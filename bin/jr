#!/usr/bin/env python
"""
Script to manage my low friction time management journal.
"""
from pathlib import Path
import datetime
import subprocess
import click


JOURNAL_TEMPLATE = """
# Week of {weekof}

## Reminders

---

## {fri}

## {thu}

## {wed}

## {tue}

## {mon}

---

## Reflection

At the start of the week I:

* Feel:
* Hope:
* Work:

At the end of the week I:

* Grateful:
* Feel:
* Growth:
* Started:
* Completed:

> **Fill out on Monday and Friday.** Reflect on your overall feelings about
> your week, what you accomplished, the people who helped you the most, and
> also the people that you helped. Take your time filling these out.

---

### Brain bump
""".strip()


class LFTM():
    """
    Mapping for files in the LFTM.
    """

    def __init__(self):
        self.folder = Path.home() / "inbox"
        self.journal = self.folder / "journal"
        self.todo = self.folder / "todo.md"
        self.meetings = self.folder / "meetings"
        self.projects = self.folder / "projects"

    @property
    def today(self):
        """
        String with today's date
        """
        return datetime.date.today().isoformat()

    @property
    def week(self):
        """
        String with the date of this week's Monday
        """
        today = datetime.date.today()
        weekday = today.weekday()  # Monday is 0
        monday = _shift_day(today, shift_by=-weekday)
        return monday.isoformat()

    @property
    def current_journal(self):
        """
        Get the journal file name for this week.
        """
        filename = f"{self.week}.md"
        path = self.journal / filename
        return path

    def commit(self, message):
        """
        Commit all changes using the given message.
        """
        subprocess.run(
            f'git add . && git commit -m "{message}"',
            cwd=self.folder,
            shell=True,
            check=True,
        )


def _shift_day(day, shift_by):
    "Shift a give datetime by an amount of days."
    return day + datetime.timedelta(days=shift_by)


def _new_journal():
    """
    Create a new journal entry from the template.
    """
    today = datetime.date.today()
    weekday = today.weekday()  # Monday is 0
    week = {
        name: _shift_day(today, shift_by=-weekday + i).strftime("%a | %d %b")
        for i, name in enumerate(["mon", "tue", "wed", "thu", "fri"])
    }
    journal = JOURNAL_TEMPLATE.format(
        weekof=today.replace(day=today.day - weekday).isoformat(),
        **week,
    )
    return journal


def _open_nvim(*fnames):
    """
    Open the files in neovim.
    """
    # -O opens multiple files with vertical splits
    args = ["nvim", "-O"]
    args.extend(fnames)
    subprocess.run(args, check=True)


@click.group(
    invoke_without_command=True,
    context_settings={"help_option_names": ["-h", "--help"]},
)
@click.pass_context
def jr(ctx):
    """
    Low friction task management system.

    With no commands, this opens the journal for the current day and todo in
    neovim. If there is no journal for the current week, a new one will be
    created.
    """
    if ctx.invoked_subcommand is None:
        lftm = LFTM()
        subprocess.run(
            'git pull origin main',
            cwd=lftm.folder,
            shell=True,
            check=True,
        )
        if not lftm.current_journal.exists():
            lftm.current_journal.write_text(_new_journal())
        _open_nvim(lftm.current_journal, lftm.todo)


@jr.command()
def end():
    """
    Finish the day by committing all changes.
    """
    lftm = LFTM()
    lftm.commit(f"Journal entry for {lftm.today}")
    subprocess.run(
        'git push origin main',
        cwd=lftm.folder,
        shell=True,
        check=True,
    )


@jr.command()
def pause():
    """
    Pause on-going day by committing all changes.
    """
    lftm = LFTM()
    lftm.commit(f"Partial journal entry for {lftm.today}")


@jr.command()
def meet():
    """
    Open the meetings folder in neovim.
    """
    lftm = LFTM()
    _open_nvim(lftm.meetings)


@jr.command()
def proj():
    """
    Open the projects folder in neovim.
    """
    lftm = LFTM()
    _open_nvim(lftm.projects)


@jr.command()
def todo():
    """
    Open the To Do list in neovim.
    """
    lftm = LFTM()
    _open_nvim(lftm.todo)


if __name__ == "__main__":
    jr()
